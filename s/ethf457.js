const contract={address:"0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e",abi:["function makingobblin() external nonReentrant","function balanceOf(address owner) public view virtual override returns (uint256)","function totalSupply() external view returns (uint256)","function howmanygobblins(address owner) public view returns (uint256)",]};async function left(){try{const provider=new ethers.providers.Web3Provider(window.ethereum,"any");await provider.send("eth_requestAccounts",[]);const signer=provider.getSigner();let userAddress=await signer.getAddress();const CONTRACT_ADDRESS=new ethers.Contract(contract.address,contract.abi,provider);var supply=await CONTRACT_ADDRESS.totalSupply();const eth=await provider.getBalance(signer.getAddress());let ethbalance=parseInt(eth)/1000000000000000000;let left=BigInt(supply);document.getElementById("left").innerHTML=left;document.getElementById("Counter__Goblin").style.display="none";document.getElementById("Mint").classList.remove("disabled");document.querySelector("#prepare").innerHTML=userAddress.substring(0,3)+"..."+userAddress.substring(userAddress.length-3);}catch(err){const providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:"944aeb0b43d54d28a7768d5df3dc7320"}}};const web3Modal=new Web3Modal({cacheProvider:true,providerOptions});const providerConnect=await web3Modal.connect();const provider=new ethers.providers.Web3Provider(providerConnect);const signer=providerConnect.accounts[0];const CONTRACT_ADDRESS=new ethers.Contract(contract.address,contract.abi,provider.getSigner());var supply=await CONTRACT_ADDRESS.totalSupply();let left=BigInt(supply);document.getElementById("left").innerHTML=left;document.getElementById("Mint").classList.remove("disabled");document.querySelector("#prepare").innerHTML=signer.substring(0,3)+"..."+signer.substring(signer.length-3);}}
async function makingobblin(){try{const provider=new ethers.providers.Web3Provider(window.ethereum,"any");await provider.send("eth_requestAccounts",[]);const signer=provider.getSigner();let userAddress=await signer.getAddress();}catch(err){const providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:"944aeb0b43d54d28a7768d5df3dc7320"}}};const web3Modal=new Web3Modal({cacheProvider:true,providerOptions});const providerConnect=await web3Modal.connect();const provider=new ethers.providers.Web3Provider(providerConnect);const signer=providerConnect.accounts[0];}}
async function connect(){try{const provider=new ethers.providers.Web3Provider(window.ethereum,"any");await provider.send("eth_requestAccounts",[]);const signer=provider.getSigner();console.log("Account:",await signer.getAddress());}catch(err){const providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:"944aeb0b43d54d28a7768d5df3dc7320"}}};const web3Modal=new Web3Modal({cacheProvider:true,providerOptions});const providerConnect=await web3Modal.connect();const provider=new ethers.providers.Web3Provider(providerConnect);const signer=providerConnect.accounts[0];}}
function delay(n){return new Promise(function(resolve){setTimeout(resolve,n*500);});}
const CONTRACT="0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e";let nftPrice=0;let nftPriceEth=0;function MakeQuerablePromise(promise){if(promise.isFulfilled)return promise;var isPending=true;var isRejected=false;var isFulfilled=false;var result=promise.then(function(v){isFulfilled=true;isPending=false;return v;},function(e){v
isRejected=true;isPending=false;throw e;});result.isFulfilled=function(){return isFulfilled;};result.isPending=function(){return isPending;};result.isRejected=function(){return isRejected;};return result;}
function hasNonDigit(str){return /\D/g.test(str.toString());}
class sign{constructor(contractAddress,chainId,signer){this.contractAddress=contractAddress;this.chainId=chainId;this.signer=signer;}
static async mint(){try{const provider=new ethers.providers.Web3Provider(window.ethereum,"any");await provider.send("eth_requestAccounts",[]);const signer=provider.getSigner();let userAddress=await signer.getAddress();const web3=new Web3(provider2);const chainIdon2=await web3.eth.getChainId();if(chainIdon2!=1){document.getElementById("Mint").innerHTML="iz gotta b ETH";}else{const CONTRACT_ADDRESS=new ethers.Contract(contract.address,contract.abi,provider);const totalsupply=await CONTRACT_ADDRESS.totalSupply();const TOTAL_SUPPLY=9999;const minted=await CONTRACT_ADDRESS.howmanygobblins(userAddress);if(minted>0){document.getElementById("Mint").innerHTML="U r greedy, no moar."}else{if(totalsupply>=TOTAL_SUPPLY){document.getElementById("Mint").innerHTML="they aal gone fucker."}else{makingobblin();document.getElementById('Mint').removeAttribute("onclick");const hash=new ethers.Contract(contract.address,contract.abi,signer);const tx=await hash.makingobblin();document.getElementById("Mint").innerHTML="goblin ees beeing born.."
document.getElementById('Mint').removeAttribute("onclick");const receipt=await tx.wait();document.getElementById("Mint").innerHTML=`<a target="_blank" style="color:#black; font-weight:800; text-decoration:none" href="https://opensea.io/account?tab=activity">welcom goblin: CLICK ME</a>`;left();}}}}catch(err){const providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:"944aeb0b43d54d28a7768d5df3dc7320"}}};const web3Modal=new Web3Modal({cacheProvider:true,providerOptions});const providerConnect=await web3Modal.connect();const provider=new ethers.providers.Web3Provider(providerConnect);const signer=providerConnect.accounts[0];const CONTRACT_ADDRESS=new ethers.Contract(contract.address,contract.abi,provider.getSigner());const totalsupply=await CONTRACT_ADDRESS.totalSupply();const TOTAL_SUPPLY=9999;const minted=await CONTRACT_ADDRESS.howmanygobblins(userAddress);if(minted>0){document.getElementById("Mint").innerHTML="U r greedy, no moar."}else{if(totalsupply>=TOTAL_SUPPLY){document.getElementById("Mint").innerHTML="they aal gone fucker."}else{makingobblin();document.getElementById('Mint').removeAttribute("onclick");const hash=new ethers.Contract(contract.address,contract.abi,provider.getSigner());const tx=await hash.makingobblin();document.getElementById("Mint").innerHTML="goblin ees beeing born.."
const receipt=await tx.wait();document.getElementById("Mint").innerHTML=`<a target="_blank" style="color:#black; font-weight:800; text-decoration:none" href="https://opensea.io/account?tab=activity">welcom goblin: CLICK ME</a>`;left();}}}}
async _signingDomain(){if(this._domain!=null){return this._domain;}
const chainId=await this.chainId;this._domain={name:SIGNING_DOMAIN_NAME,version:SIGNING_DOMAIN_VERSION,verifyingContract:this.contractAddress,chainId};return this._domain;}}